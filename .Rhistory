bwplot(Ozone ~ Month, airquality, groups = Day, horizontal = FALSE, panel = "panel.superpose",
panel.groups = "panel.linejoin"
bwplot(Ozone ~ Month, airquality, groups = Day, horizontal = FALSE, panel = "panel.superpose",
panel.groups = "panel.linejoin")
bwplot(Ozone ~ Month, airquality, groups = Day, horizontal = FALSE, panel = "panel.superpose",
panel.groups = "panel.linejoin")
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1,6), ylab=NULL)
aspect=0.5, layout = c(3,2), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(3,2), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(3,8), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(length(unique(barley$site))), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(length(unique(barley$site), 1)), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(length(unique(barley$site)), 1), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1, length(unique(barley$site))), ylab=NULL)
dotplot(variety ~ yield | site, data = barley, groups = year,
key = simpleKey(levels(barley$year), space = "right"),
xlab = "Barley Yield (bushels/acre) ",
aspect=0.5, layout = c(1, length(unique(barley$site))), ylab=NULL)
barchart(yield ~ variety | site, data = barley,
groups = year, layout = c(1,6), stack = TRUE,
auto.key = list(space = "right"),
ylab = "Barley Yield (bushels/acre)",
scales = list(x = list(rot = 45)))
library("ggplot2")
?qplot
qplot(Ozone ~ Wind, data = airquality)
str(mpg)
boxplot(cyl, data = mpg)
boxplot(cyl ~ model, data = mpg)
boxplot(cyl ~ model, data = mpg, horizontal = TRUE)
qplot(displ, hwy, data = mpg)
qplot(hwy, cty, data = mpg)
qplot(hwy, cty, data = mpg, color = model)
qplot(hwy, cty, data = mpg, color = year)
qplot(hwy, cty, data = mpg, color = as.factor(year))
qplot(hwy, cty, data = mpg, color = as.factors(year))
qplot(hwy, cty, data = mpg, color = as.factor(year))
factor(year)
mpg <- transform(mpg, year = factor(year))
qplot(hwy, cty, data = mpg, color = year)
qplot(hwy, cty, data = mpg, color = year, facets = drv)
install.packages("RJDBC")
qplot(hwy, cty, data = mpg, color = year, facets = drv)
qplot(hwy, cty, data = mpg, color = year, geom = c("point", "smooth"))
qplot(dipsly, cty, data = mpg, color = year, geom = c("point", "smooth"))
qplot(disply, cty, data = mpg, color = year, geom = c("point", "smooth"))
qplot(displ, cty, data = mpg, color = year, geom = c("point", "smooth"))
qplot(displ, cty, data = mpg, color = year, geom = c("point", "smooth"), facets = .~model)
qplot(hwy, cty, data = mpg, color = model, geom = c("point", "smooth"), facets = .~displ)
str(mpg)
qplot(hwy, data = mpg, facets = class ~ displ)
mpg <- transform(mpg, displ = factor(displ))
qplot(hwy, data = mpg, facets = class ~ displ)
qplot(hwy, data = mpg, facets = class ~ drv)
qplot(hwy, data = mpg, facets = drv ~ cyl)
qplot(hwy, cty, data = mpg, facets = drv ~ cyl)
qlot(hwy, data = mpg, geom = "density")
qplot(hwy, data = mpg, geom = "density")
qplot(hwy, data = mpg, geom = "density", color = "class")
qplot(hwy, data = mpg, geom = "density", color = class)
qplot(hwy, data = mpg, geom = "density", color = class, facets = trans~drv)
qplot(hwy, data = mpg, geom = "density", color = class, facets = .~drv)
qplot(hwy, data = mpg, geom = "density", color = class, facets = drv~.)
qplot(hwy, data = mpg, geom = "density", color = class, facets = drv~.) + geom_smooth(method = "lm")
qplot(hwy, cty, data = mpg, geom = "density", color = class, facets = drv~.) + geom_smooth(method = "lm")
qplot(hwy, cty, data = mpg, color = class, facets = drv~.) + geom_smooth(method = "lm")
qplot(hwy, cty, data = mpg, facets = drv~.) + geom_smooth(method = "lm")
qplot(displ, cty, data = mpg, facets = drv~.) + geom_smooth(method = "lm")
mpg <- transform(mpg, displ = as.numeric(displ))
qplot(displ, cty, data = mpg, facets = drv~.) + geom_smooth(method = "lm")
?par
library(datasets)
dataFrame <- data.frame(mpg$cty, mpg$displ)
kmo <- kmeans(dataFrame, centers = 4)
names(kmo)
kmo$cluster
kmo$totss
kmo$withinss
kmo$centres
kmo$centers
kmo$ifault
kmo$iter
kmo$size
kmo$tot.withinss
par(mar = rep(0.2, 4))
plot(mpg$cty, mpg$displ, col = kmo$cluster, pch = 20, cex = 2)
points(kmo$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
points(kmo$centers, col = 1:4, pch = 3, cex = 3, lwd = 3)
kmo <- kmeans(dataFrame, centers = 8)
plot(mpg$cty, mpg$displ, col = kmo$cluster, pch = 20, cex = 2)
points(kmo$centers, col = 1:8, pch = 3, cex = 3, lwd = 3)
heat.colors()
heat.colors(n = 10)
heat.colors(n=1000)
colors()
points(kmo$centers, col = c("thistle"), pch = 3, cex = 3, lwd = 3)
points(kmo$centers, col = heat.colors(n = 8), pch = 3, cex = 3, lwd = 3)
colorRamp("red","blue")
pal <- colorRamp(colors = c("red","blue"))
points(kmo$centers, col = pal(seq(0, 1, 8)), pch = 3, cex = 3, lwd = 3)
points(kmo$centers, col = pal(seq(0, 1, 8)), pch = 18, cex = 3, lwd = 3)
points(kmo$centers, col = pal(seq(0, 1, len = 8)), pch = 18, cex = 3, lwd = 3)
pal(seq(0, 1, len = 8))
pal <- colorRampPalette(c("red", "blue"))
points(kmo$centers, col = pal(8), pch = 18, cex = 3, lwd = 3)
points(c(1:8), col = pal(8), pch = 18, cex = 3, lwd = 3)
points(x = c(1:8), y = c(1:8), col = pal(8), pch = 18, cex = 3, lwd = 3)
install.packages("RColorBrewer")
?RColorBrewer
??RColorBrewer
?brewer.pa
?brewer.pal
library("RColorBrewer")
?brewer.pal
smoothScatter(x = mpg$displ, y = mpg$cty)
points(kmo$centers, col = pal(8), pch = 18, cex = 3, lwd = 3)
smoothScatter(x = mpg$displ, y = mpg$cty, colramp = 8)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hclust(d = distxy)
hc <- hclust(d = distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
abline(h=0.05, col="red")
12
abline(h=0.05, col="green")
dist(dFsm)
plot(hc)
hc
k
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
# Firstly, read in the data set from the external file
df <- read.csv("../data/activity.csv")
# Then load dplyr to do the aggregations, etc.
library(dplyr)
# Load lattice package for lattice plotting
library(lattice)
df.len <- nrow(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, function(x) sum(is.na(x)) / df.len)
dirname(sys.frame(1)$ofile)
dirname(sys.frame(0)$ofile)
this.dir <- dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
this.dir <- dirname(sys.frame(1)$ofile)
source('C:/gitProjects/setwd test.R', echo=TRUE)
this.dir
setwd("C:\\gitProjects\\reproducible-research-cp1\\src")
df <- read.csv("../data/activity.csv")
# Then load dplyr to do the aggregations, etc.
library(dplyr)
# Load lattice package for lattice plotting
library(lattice)
df.len <- nrow(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, function(x) sum(is.na(x)) / df.len)
df.len <- nrow(df)
df.cc <- complete.cases(df) # we want to omit NA cases specifically
z <- length(df$steps[df$steps==0 & df.cc]) # zeros that aren't NAs
# Show the results
z # total number of zero cases
z / df.len # percentage of zero cases
is.na(x = df$steps == FALSE)
df$steps[is.na(x = df$steps == FALSE)]
is.na(df$steps) == FALSE
df.nona <- df[is.na(df$steps) == FALSE]
df.nona <- df[is.na(df$steps) == FALSE,]
head(df.nona)
# Obtain the median number of steps per interval
df.nona <- df[is.na(df$steps) == FALSE,]  # remove the NAs first...
mspi <-
aggregate(
list(steps = df.nona$steps)
,   by=list(interval = df.nona$interval)
)
# Obtain the median number of steps per interval
df.nona <- df[is.na(df$steps) == FALSE,]  # remove the NAs first...
mspi <-
aggregate(
list(steps = df.nona$steps)
,   by=list(interval = df.nona$interval)
,   FUN=median
)
mpsi
mspi
inner_join(df, mspi, by="interval")
mspi <-
aggregate(
list(median.steps = df.nona$steps)
,   by=list(interval = df.nona$interval)
,   FUN=median
)
# Next, we need to impute the missing values to a cleaned dataset
df.cleaned <- df # make a copy of the original dataset
inner_join(df, mspi, by="interval")
head(inner_join(df, mspi, by="interval"))
inner_join(df[is.na(df$steps) == TRUE,], mspi, by="interval")
inner_join(df, mspi, by="interval")
df.cleaned <- df
?if
;
?if()
help
impute.NA <- function (x, y) {
if(is.na(x) == FALSE) {
return(x)
}
return(y)
}
impute.NA(x = NA, y = "dog")
impute.NA(x = "chicken", y = "dog")
apply(inner_join(df, mspi, by="interval"), 1, function(x, y) impute.NA(x = steps, y = median.steps))
apply(inner_join(df, mspi, by="interval"), 1, function(x, y) impute.NA(x = df$steps, y = interval$median.steps))
apply(inner_join(df, mspi, by="interval"), 1, function(x, y) impute.NA(x = x[1], y = x[2])
)
apply(inner_join(df, mspi, by="interval"), 1, function(x, y) impute.NA(x = x["steps"], y = x["median.steps"]))
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(x) impute.NA(x = x["steps"], y = x["median.steps"])
)
)
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(x) impute.NA(x = x["steps"], y = x["median.steps"])
)
apply(inner_join(df, mspi, by="interval"), 1, function(x, y) impute.NA(x = x["steps"], y = x["median.steps"]))
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(x) impute.NA(x = x["steps"], y = x["median.steps"])
)
head(apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(x) impute.NA(x = x["steps"], y = x["median.steps"])
))
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(x) impute.NA(x = x["steps"], y = x["median.steps"])
)
df.cleaned[is.na(df.cleaned$steps) == TRUE,]
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(row) impute.NA(x = row["steps"], y = row["median.steps"])
)
df.nona <- complete.cases(df)
mspi <-
aggregate(
list(median.steps = df.nona$steps)
,   by=list(interval = df.nona$interval)
,   FUN=median
)
complete.cases(df)
df.nona <- df[is.na(df$steps) == FALSE,]  # remove the NAs first...
mspi <-
aggregate(
list(median.steps = df.nona$steps)
,   by=list(interval = df.nona$interval)
,   FUN=median
)
# Next, we need to impute the missing values to a cleaned dataset
df.cleaned <- df
impute.NA <- function (x, y) {
if(is.na(x) == FALSE) {
return(x)
}
return(y)
}
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(row) impute.NA(x = row["steps"], y = row["median.steps"])
)
hist(
aggregate(df.cleaned$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day"
)
df.cleaned$steps <-
apply(
inner_join(
df
,   mspi
,   by="interval"
)
,   1
,   function(row) as.integer(impute.NA(x = row["steps"], y = row["median.steps"]))
)
hist(
aggregate(df.cleaned$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day"
)
# Before cleansing
hist(
aggregate(df$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day (before data cleansing)"
)
# After cleansing
hist(
aggregate(df.cleaned$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day (after data cleansing)"
)
# Before cleansing
hist(
aggregate(df$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day (before data cleansing)"
,   xlab="Number of steps per day"
)
# After cleansing
hist(
aggregate(df.cleaned$steps, by=list(date=df.cleaned$date), FUN=sum)$x
,   main="Number of steps per day (after data cleansing)"
,   xlab="Number of steps per day"
)
# Draw a plot of the average number of steps per day, per interval
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(df.cleaned$interval)
,   FUN=mean)
,   c("interval", "steps")
)
spi <- arrange(spi, interval) # ensure that the intervals are in order
barplot(
height=spi$steps
,   xaxt="n", xlab="Hour of Day", ylab="Avg. Steps Taken"
,   main="Average # steps per interval"
)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 24, 1)
,   tick=FALSE
)
# Work out which days are weekends and which are weekdays
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$weekday.weekend != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
# Draw a plot of the average number of steps per day, per interval, per
# weekday/weekend split
barchart(
steps ~ interval | factor(weekday.weekend)
,   data=spi
,   horizontal=FALSE, layout=c(1,2)
,   scales=list(
x=list(
at=seq(1,288,12)
,   labels=seq(0,23,1)
)
)
, xlab="Hour of day"
)
barchart(
steps ~ interval | factor(weekday.weekend)
,   data=spi
#,   horizontal=FALSE, layout=c(1,2)
,   scales=list(
x=list(
at=seq(1,288,12)
,   labels=seq(0,23,1)
)
)
, xlab="Hour of day"
)
barchart(
steps ~ interval | factor(weekday.weekend)
,   data=spi
,   horizontal=FALSE#, layout=c(1,2)
,   scales=list(
x=list(
at=seq(1,288,12)
,   labels=seq(0,23,1)
)
)
, xlab="Hour of day"
)
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned
df.cleaned$weekday.weekend[df.cleaned$weekday.weekend != "Weekend"] <- "Weekday"
df.cleaned
df.cleaned$weekday.weekend != "Weekend"
df.cleaned$weekday.weekend[is.na(df.cleaned$weekday.weekend)] <- "Weekday"
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
barchart(
steps ~ interval | factor(weekday.weekend)
,   data=spi
,   horizontal=FALSE, layout=c(1,2)
,   scales=list(
x=list(
at=seq(1,288,12)
,   labels=seq(0,23,1)
)
)
, xlab="Hour of day"
)
