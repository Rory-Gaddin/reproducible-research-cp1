setwd("C:\gitProjects\reproducible-research-cp1\src")
setwd("C:\\gitProjects\\reproducible-research-cp1\\src")
df <- read.csv("../data/activity.csv")
# Then load dplyr to do the aggregations, etc.
library(dplyr)
# Check each column to see if there are NA values
df.len <- nrow(df)
sapply(df, function(x) sum(is.na(x)))
sapply(df, function(x) sum(is.na(x)) / df.len)
# Check how many observations there are with zero values for steps
df.len <- nrow(df)
df.cc <- complete.cases(df) # we want to omit NA cases specifically
z <- length(df$steps[df$steps==0 & df.cc]) # zeros that aren't NAs
# Show the results
z # total number of zero cases
z / df.len # percentage of zero cases
na.vec <- is.na(df$steps) # Get a vector of all the NA observations
df$na.count[na.vec] = 1 # mark the NA values with a 1 so we can count them
df$na.count[!na.vec] = 0 # mark the non-NA values with a 0
# sum up the NA observations per day and see how many days are affected...
na.dates <- aggregate(df$na.count, by=list(date=df$date), FUN=sum)
na.dates[na.dates$x > 0, ]
df.cleaned <- df[!na.vec, ]
spd <- aggregate(df.cleaned$steps, by=list(date=df.cleaned$date), FUN=sum)
mean.steps <- as.integer(mean(spd$x))
median.steps <- as.integer(median(spd$x))
plot(spd$x, type="o", xlab="Date", ylab="# Steps", main="Steps per day over time")
max.steps.pd <-
aggregate(
df.cleaned$steps
,   by=list(df.cleaned$date)
,   FUN=max
)
max.steps.pd
joined.cases <- inner_join(max.steps.pd, df.cleaned, steps)
max.steps.pd <-
aggregate(
list(steps = df.cleaned$steps)
,   by=list(date = df.cleaned$date)
,   FUN=max
)
max.steps.pd
joined.cases <- inner_join(max.steps.pd, df.cleaned, steps)
str(df.cleaned)
joined.cases <- inner_join(max.steps.pd, df.cleaned, by="steps")
str(joined.cases)
max.steps.pd <-
aggregate(
list(max.steps = df.cleaned$steps)
,   by=list(date = df.cleaned$date)
,   FUN=max
)
joined.cases <- inner_join(max.steps.pd, df.cleaned, by="date")
head(joined.cases)
matched.cases <- filter(joined.cases, steps == x)
matched.cases <- joined.cases %>% filter(steps==max.steps)
matched.cases
matched.cases$count = 1
summed.cases <- aggregate(matched.cases$count, by=list(matched.cases$interval))
summed.cases
matched.cases$count = 1
summed.cases <- aggregate(matched.cases$count, by=list(matched.cases$interval), FUN=sum)
summed.cases
matched.cases$count = 1
summed.cases <-
aggregate(
(number.of.max.occurrences = matched.cases$count)
,   by=list(interval = matched.cases$interval)
,   FUN=sum)
arrange(summed.cases, desc(number.of.max.occurrences))
matched.cases$count = 1
summed.cases <-
aggregate(
(number.of.max.occurrences = matched.cases$count)
,   by=list(interval = matched.cases$interval)
,   FUN=sum)
matched.cases$count = 1
summed.cases <-
aggregate(
(number.of.max.occurrences = matched.cases$count)
,   by=list(interval = matched.cases$interval)
,   FUN=sum)
matched.cases$count = 1
summed.cases <-
aggregate(
list(number.of.max.occurrences = matched.cases$count)
,   by=list(interval = matched.cases$interval)
,   FUN=sum)
arrange(summed.cases, desc(number.of.max.occurrences))
```
head(arrange(summed.cases, desc(number.of.max.occurrences)), 1)
max(df$interval)
distinct(df$interval)
group_by(df$interval)
group_by(by=df$intervall)
group_by(by=df$interval)
group_by(by=list(df$interval))
group_by(1, by=list(df$interval))
aggregate(1, by=list(df$interval), fun=SUM)
aggregate(1, by=list(df$interval), FUN=sum)
aggregate(c(1), by=list(df$interval), FUN=sum)
unique(df$interval)
plot(head(arrange(summed.cases, desc(number.of.max.occurrences)), 10))
top.10.intervals -> head(arrange(summed.cases, desc(number.of.max.occurrences)), 10))
top.10.intervals -> head(arrange(summed.cases, desc(number.of.max.occurrences)), 10)
top.10.intervals <- head(arrange(summed.cases, desc(number.of.max.occurrences)), 10)
summed.cases
top.10.intervals
top.10.intervals$ordinal.pos <- c(1:10)
top.10.intervals
plot(number.of.max.occurrences ~ ordinal.pos, data=top.10.intervals)
plot(number.of.max.occurrences ~ ordinal.pos, data=top.10.intervals, xlab=list(top.10.intervals$interval)))
plot(number.of.max.occurrences ~ ordinal.pos, data=top.10.intervals, xlab=list(top.10.intervals$interval))
no.vals.to.display <- 10
no.vals.to.display <- 10
top.10.intervals <-
head(
arrange(
summed.cases
,   desc(number.of.max.occurrences)
)
, no.vals.to.display)
top.10.intervals$ordinal.pos <- c(1:no.vals.to.display)
top.10.intervals
no.vals.to.display <- 5
top.n.intervals <-
head(
arrange(
summed.cases
,   desc(number.of.max.occurrences)
)
, no.vals.to.display)
top.n.intervals$ordinal.pos <- c(1:no.vals.to.display)
plot(
number.of.max.occurrences ~ ordinal.pos
,   data=top.n.intervals
,   xaxt="n", xlab="Interval")
no.vals.to.display <- 5
top.n.intervals <-
head(
arrange(
summed.cases
,   desc(number.of.max.occurrences)
)
, no.vals.to.display)
top.n.intervals$ordinal.pos <- c(1:no.vals.to.display)
plot(
number.of.max.occurrences ~ ordinal.pos
,   data=top.n.intervals
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top ", no.vals.to.display, " Intervals"), collapse = " "))
no.vals.to.display <- 5
top.n.intervals <-
head(
arrange(
summed.cases
,   desc(number.of.max.occurrences)
)
, no.vals.to.display)
top.n.intervals$ordinal.pos <- c(1:no.vals.to.display)
barplot(
number.of.max.occurrences ~ ordinal.pos
,   data=top.n.intervals
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
barplot(
height=data=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
barplot(
height=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
axis(
1
,   at=1:no.vals.to.display
,   labels=top.n.intervals$interval
)
?axis
barplot(
barplot(
height=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
axis(
1
,   at=1:no.vals.to.display
,   labels=top.n.intervals$interval
,
barplot(
barplot(
height=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
axis(
1
,   at=1:no.vals.to.display
,   labels=top.n.intervals$interval
,   tick=FALSE
)
barplot(
height=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
axis(
1
,   at=1:no.vals.to.display
,   labels=top.n.intervals$interval
,   tick=FALSE
)
no.vals.to.display <- 10
top.n.intervals <-
head(
arrange(
summed.cases
,   desc(number.of.max.occurrences)
)
, no.vals.to.display)
top.n.intervals$ordinal.pos <- c(1:no.vals.to.display)
barplot(
height=top.n.intervals$number.of.max.occurrences
,   xaxt="n", xlab="Interval"
,   main=paste(c("Top", no.vals.to.display, "Intervals"), collapse = " "))
axis(
1
,   at=1:no.vals.to.display
,   labels=top.n.intervals$interval
,   tick=FALSE
)
spi <- aggregate(df.cleaned$steps, by=list(interval), FUN=average)
spi <- aggregate(df.cleaned$steps, by=list(interval), FUN=mean)
spi <- aggregate(df.cleaned$steps, by=list(df.cleaned$interval), FUN=mean)
spi
spi <- arrange(spi, interval)
str(interval)
str(spi)
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(df.cleaned$interval)
,   FUN=mean)
,   c("steps", "interval")
)
spi
spi <- arrange(spi, interval)
barplot(
height=spi$steps,
xaxt="n", xlab="Interval"
main="Average # steps per interval"
)
axis(
1
,   labels=spi$interval
,   tick=FALSE
)
barplot(
height=spi$steps,
xaxt="n", xlab="Interval"
main="Average # steps per interval"
)
axis(
1
,   at=1:nrow(spi)
,   labels=spi$interval
,   tick=FALSE
)
barplot(
height=spi$steps
,   xaxt="n", xlab="Interval"
,   main="Average # steps per interval"
)
axis(
1
,   at=1:nrow(spi)
,   labels=spi$interval
,   tick=FALSE
)
plot(
y=spi$steps
,   xaxt="n", xlab="Interval"
,   main="Average # steps per interval"
)
plot(
steps ~ interval, data=spi
,   xaxt="n", xlab="Interval"
,   main="Average # steps per interval"
)
plot(spi$steps)
plot(spi$steps, type="o")
barplot(
height=spi$steps
,   xaxt="n", xlab="Interval"
,   main="Average # steps per interval"
)
axis(
1
,   at=1:nrow(spi)
,   labels=spi$interval
,   tick=FALSE
)
barplot(
height=spi$steps
,   xaxt="n", xlab="Interval"
,   main="Average # steps per interval"
)
seq(1, 288, 6)
seq(1, 288, 12)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 12, 1)
,   tick=FALSE
)
axis(
1
,   at=seq(1, 289, 12)
,   labels=seq(1, 12, 1)
,   tick=FALSE
)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 24, 1)
,   tick=FALSE
)
nrow(spi)
barplot(
height=spi$steps
,   xaxt="n", xlab="Hour of Day"
,   main="Average # steps per interval"
)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 24, 1)
,   tick=FALSE
)
?axis
spi <- arrange(spi, interval) # ensure that the intervals are in order
barplot(
height=spi$steps
,   xaxt="n", xlab="Hour of Day", ylab="average steps taken"
,   main="Average # steps per interval"
)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 24, 1)
,   tick=FALSE
)
weekdays(df$date)
weekdays(as.Date(df$date))
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned[df.cleaned$day.of.week == "Saturday" | df.cleaned$day.of.week == "Sunday"]
df.cleaned[df.cleaned$day.of.week == "Saturday" | df.cleaned$day.of.week == "Sunday", ]
df.cleaned$weekday.weekend[df.cleaned$day.of.week  "Saturday" | df.cleaned$day.of.week == "Sunday", ] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week == "Saturday" | df.cleaned$day.of.week == "Sunday", ] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week == "Saturday" | df.cleaned$day.of.week == "Sunday"] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week <> "Weekend", ]
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend", ]
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend"]
# Work out which days are weekends and which are weekdays
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
interval = df.cleaned$interval
,   weekday.weekend = df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("steps", "interval")
)
spi <- arrange(spi, interval) # ensure that the intervals are in order
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
interval = df.cleaned$interval
,   weekday.weekend = df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("steps", "interval")
)
spi
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(df.cleaned$interval)
,   FUN=mean)
,   c("interval", "steps")
)
spi <- arrange(spi, interval) # ensure that the intervals are in order
barplot(
height=spi$steps
,   xaxt="n", xlab="Hour of Day", ylab="Avg. Steps Taken"
,   main="Average # steps per interval"
)
axis(
1
,   at=seq(1, 288, 12)
,   labels=seq(1, 24, 1)
,   tick=FALSE
)
library(lattice)
barchart(steps ~ interval | factor(weekday.weekend), data=spi)
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
# Draw a plot of the average number of steps per day, per interval, per
# weekday/weekend split
barchart(steps ~ interval | factor(weekday.weekend), data=spi)
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$day.of.week != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
# Draw a plot of the average number of steps per day, per interval, per
# weekday/weekend split
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE)
spi$weekday.weekend
df.cleaned$weekday.weekend
# Work out which days are weekends and which are weekdays
df.cleaned$day.of.week <- weekdays(as.Date(df.cleaned$date))
df.cleaned$weekday.weekend[
df.cleaned$day.of.week == "Saturday"
|   df.cleaned$day.of.week == "Sunday"
] <- "Weekend"
df.cleaned$weekday.weekend[df.cleaned$weekday.weekend != "Weekend"] <- "Weekday"
# Aggregate the average number of steps taken per interval, per weekday/weekend
# split
spi <-
setNames(
aggregate(
df.cleaned$steps
,   by=list(
df.cleaned$interval
,   df.cleaned$weekday.weekend
)
,   FUN=mean)
,   c("interval", "weekday.weekend", "steps")
)
# Draw a plot of the average number of steps per day, per interval, per
# weekday/weekend split
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE)
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE, layout=c(2,1))
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE, layout=c(1,2))
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE, layout=c(1,2))
?barchart()
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE, layout=c(1,2),scales=list(x=list(at=seq(1,288,12),labels=seq(1,24,1))))
barchart(steps ~ interval | factor(weekday.weekend), data=spi, horizontal=FALSE, layout=c(1,2),scales=list(x=list(at=seq(1,288,12),labels=seq(1,24,1))), xlab="Hour of day")
barchart(
steps ~ interval | factor(weekday.weekend)
,   data=spi
,   horizontal=FALSE, layout=c(1,2)
,   scales=list(
x=list(
at=seq(1,288,12)
,   labels=seq(1,24,1)
)
)
, xlab="Hour of day"
)
